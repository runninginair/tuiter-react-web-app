{"ast":null,"code":"import _slicedToArray from \"/Users/tylerzhang/2023/spring/webdev/tuiter-react-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/tylerzhang/2023/spring/webdev/tuiter-react-web-app/src/labs/a7/redux-examples/todos-component.js\";\n/**     useState is React Hook that allows you to add state to a functional component.\n * It returns an array with two values: the current state and a function to update it.\n * The Hook takes an initial state value as an argument and returns an updated state\n * value whenever the setter function is called.\n */\nimport React, { useState } from \"react\"; // import useState to work with local state\n\n/**     useSelector and useDispatch are a set of hooks to use as alternatives to the\n * existing connect() higher-order component.\n *      The equivalent of map state to props is useSelector. It takes in a function\n * argument that returns the part of the state that you want.\n */\nimport { useSelector, useDispatch } from \"react-redux\"; // import useSelector\n\n/* import reducer function exported by todos-reducer */\nimport { addTodo, deleteTodo, todoDoneToggle } from \"./reducers/todos-reducer\";\n\n/**\n * The component uses useSelector to retrieve the todos generated by todos-reducer.js.\n * The todos is retrieved from the reducer with useSelector returning the todos arrays\n * returned by the reducer, e.g., the array of two todo objects in todos-reducer.js.\n */\n\nvar Todos = function Todos() {\n  // retrieve todos from reducer state and assign to local todos constant\n  var todos = useSelector(function (state) {\n    return state.todos;\n  });\n\n  // The React useState hook can be used to deal with local component state.\n  // This is especially useful to integrate React with forms.\n  var _useState = useState({\n      do: ''\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    todo = _useState2[0],\n    setTodo = _useState2[1]; // create todo local state variable\n  var dispatch = useDispatch(); // get distacher to invoke reducer functions\n\n  var createTodoClickHandler = function createTodoClickHandler() {\n    // handle click event of button\n    dispatch(addTodo(todo)); // call reducer function passing new todo\n  }; // as the payload in the action object\n\n  var toggleTodoDone = function toggleTodoDone(todo) {\n    // handle checkbox click event, accept todo index\n    dispatch(todoDoneToggle(todo)); // send index to reducer function passing index\n  }; // of todo to toggle done field\n\n  var deleteTodoClickHandler = function deleteTodoClickHandler(index) {\n    dispatch(deleteTodo(index));\n  };\n\n  /** handle keystroke changes in input field get data from input field \n   * create new todo object instance setting the todo's do property\n   */\n  var todoChangeHandler = function todoChangeHandler(event) {\n    var doValue = event.target.value;\n    var newTodo = {\n      do: doValue\n    };\n    setTodo(newTodo); // change local state todo variable\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Todos\"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-group\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"list-group-item\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createTodoClickHandler,\n    className: \"btn btn-primary w-25 float-end\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, \"Create\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: todoChangeHandler,\n    value: todo.do,\n    className: \"form-control w-75\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  })),\n  // iterate over todos array and render a\n  // line item element for each todo object\n  // display do property containing the todo text\n  todos.map(function (todo, index) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: todo._id,\n      className: \"list-group-item\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        return deleteTodoClickHandler(index);\n      },\n      className: \"btn btn-danger float-end ms-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, \"Delete\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: todo.done,\n      onChange: function onChange() {\n        return toggleTodoDone(todo);\n      },\n      className: \"me-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }), todo.do);\n  })));\n};\nexport default Todos;","map":{"version":3,"names":["React","useState","useSelector","useDispatch","addTodo","deleteTodo","todoDoneToggle","Todos","todos","state","do","todo","setTodo","dispatch","createTodoClickHandler","toggleTodoDone","deleteTodoClickHandler","index","todoChangeHandler","event","doValue","target","value","newTodo","map","_id","done"],"sources":["/Users/tylerzhang/2023/spring/webdev/tuiter-react-web-app/src/labs/a7/redux-examples/todos-component.js"],"sourcesContent":["/**     useState is React Hook that allows you to add state to a functional component.\n * It returns an array with two values: the current state and a function to update it.\n * The Hook takes an initial state value as an argument and returns an updated state\n * value whenever the setter function is called.\n */\nimport React, { useState } from \"react\";    // import useState to work with local state\n\n/**     useSelector and useDispatch are a set of hooks to use as alternatives to the\n * existing connect() higher-order component.\n *      The equivalent of map state to props is useSelector. It takes in a function\n * argument that returns the part of the state that you want.\n */\nimport { useSelector, useDispatch } from \"react-redux\";      // import useSelector\n\n/* import reducer function exported by todos-reducer */\nimport { addTodo, deleteTodo, todoDoneToggle } from \"./reducers/todos-reducer\";\n\n/**\n * The component uses useSelector to retrieve the todos generated by todos-reducer.js.\n * The todos is retrieved from the reducer with useSelector returning the todos arrays\n * returned by the reducer, e.g., the array of two todo objects in todos-reducer.js.\n */\n\nconst Todos = () => {\n    // retrieve todos from reducer state and assign to local todos constant\n    const todos = useSelector(state => state.todos);\n\n    // The React useState hook can be used to deal with local component state.\n    // This is especially useful to integrate React with forms.\n    const [todo, setTodo] = useState({ do: '' });   // create todo local state variable\n\n    const dispatch = useDispatch();             // get distacher to invoke reducer functions\n\n    const createTodoClickHandler = () => {      // handle click event of button\n        dispatch(addTodo(todo))                 // call reducer function passing new todo\n    }                                           // as the payload in the action object\n\n    const toggleTodoDone = (todo) => {          // handle checkbox click event, accept todo index\n        dispatch(todoDoneToggle(todo))          // send index to reducer function passing index\n    }                                           // of todo to toggle done field\n\n    const deleteTodoClickHandler = (index) => {\n        dispatch(deleteTodo(index))\n    }\n\n    /** handle keystroke changes in input field get data from input field \n     * create new todo object instance setting the todo's do property\n     */\n    const todoChangeHandler = (event) => {\n        const doValue = event.target.value;\n        const newTodo = {\n            do: doValue\n        };\n        setTodo(newTodo);                   // change local state todo variable\n    }\n\n    return (\n        <>\n            <h3>Todos</h3>\n            <ul className=\"list-group\">\n\n                <li className=\"list-group-item\">\n                    <button \n                        onClick={createTodoClickHandler}\n                        className=\"btn btn-primary w-25 float-end\">\n                        Create\n                    </button>\n\n                    <input\n                        onChange={todoChangeHandler}\n                        value={todo.do}\n                        className=\"form-control w-75\" />\n                </li>\n\n                {\n                    // iterate over todos array and render a\n                    // line item element for each todo object\n                    // display do property containing the todo text\n                    todos.map((todo, index) =>\n                        <li key={todo._id} className=\"list-group-item\">\n                            <button onClick={() =>\n                                deleteTodoClickHandler(index)}\n                                className=\"btn btn-danger float-end ms-2\">\n                                Delete\n                            </button>\n\n                            <input type=\"checkbox\"\n                                checked={todo.done}\n                                onChange={() => toggleTodoDone(todo)}\n                                className=\"me-2\" />\n\n                            {todo.do}\n                        </li>\n                    )\n                }\n\n            </ul>\n        </>\n    );\n};\n\nexport default Todos;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}