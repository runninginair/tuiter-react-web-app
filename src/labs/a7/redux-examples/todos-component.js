/**     useState is React Hook that allows you to add state to a functional component.
 * It returns an array with two values: the current state and a function to update it.
 * The Hook takes an initial state value as an argument and returns an updated state
 * value whenever the setter function is called.
 */
import React, { useState } from "react";    // import useState to work with local state

/**     useSelector and useDispatch are a set of hooks to use as alternatives to the
 * existing connect() higher-order component.
 *      The equivalent of map state to props is useSelector. It takes in a function
 * argument that returns the part of the state that you want.
 */
import { useSelector, useDispatch } from "react-redux";      // import useSelector

/* import reducer function exported by todos-reducer */
import { addTodo, deleteTodo, todoDoneToggle } from "./reducers/todos-reducer";

/**
 * The component uses useSelector to retrieve the todos generated by todos-reducer.js.
 * The todos is retrieved from the reducer with useSelector returning the todos arrays
 * returned by the reducer, e.g., the array of two todo objects in todos-reducer.js.
 */

const Todos = () => {
    // retrieve todos from reducer state and assign to local todos constant
    const todos = useSelector(state => state.todos);

    // The React useState hook can be used to deal with local component state.
    // This is especially useful to integrate React with forms.
    const [todo, setTodo] = useState({ do: '' });   // create todo local state variable

    const dispatch = useDispatch();             // get distacher to invoke reducer functions

    const createTodoClickHandler = () => {      // handle click event of button
        dispatch(addTodo(todo))                 // call reducer function passing new todo
    }                                           // as the payload in the action object

    const toggleTodoDone = (todo) => {          // handle checkbox click event, accept todo index
        dispatch(todoDoneToggle(todo))          // send index to reducer function passing index
    }                                           // of todo to toggle done field

    const deleteTodoClickHandler = (index) => {
        dispatch(deleteTodo(index))
    }

    /** handle keystroke changes in input field get data from input field 
     * create new todo object instance setting the todo's do property
     */
    const todoChangeHandler = (event) => {
        const doValue = event.target.value;
        const newTodo = {
            do: doValue
        };
        setTodo(newTodo);                   // change local state todo variable
    }

    return (
        <>
            <h3>Todos</h3>
            <ul className="list-group">

                <li className="list-group-item">
                    <button 
                        onClick={createTodoClickHandler}
                        className="btn btn-primary w-25 float-end">
                        Create
                    </button>

                    <input
                        onChange={todoChangeHandler}
                        value={todo.do}
                        className="form-control w-75" />
                </li>

                {
                    // iterate over todos array and render a
                    // line item element for each todo object
                    // display do property containing the todo text
                    todos.map((todo, index) =>
                        <li key={todo._id} className="list-group-item">
                            <button
                                onClick={() => deleteTodoClickHandler(index)}
                                className="btn btn-danger float-end ms-2">
                                Delete
                            </button>

                            <input type="checkbox"
                                checked={todo.done}
                                onChange={() => toggleTodoDone(todo)}
                                className="me-2" />
                            
                            Done:{todo.done? " Yes " : " No "}&nbsp;&nbsp;

                            {todo.do}
                        </li>
                    )   
                }
            </ul>
        </>
    );
};

export default Todos;
