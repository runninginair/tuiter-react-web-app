{"ast":null,"code":"/**     2.5 Retrieving state from a reducer\n * \n * Redux allows maintaining the state of an application. The state changes over time as\n * the user interacts with the application. There are four basic ways we interact with data:\n * create data, read data, update date, and delete data. We often refer to these operations\n * by the acronym CRUD. Let's implement a small todo app to illustrate the CRUD operations.\n * In the same reducers directory created earlier, create the reducer for the todo app in a\n * file called todos-reducer.js. Copy the content below into the file.\n */\n\nimport { createSlice } from '@reduxjs/toolkit';\nvar initialTodos = [{\n  _id: \"123\",\n  do: \"Accelerate the world's transition to sustainable energy\",\n  done: false\n}, {\n  _id: \"234\",\n  do: \"Reduce space transportation costs to become a spacefaring civilization\",\n  done: false\n}];\n\n/**     About \"creatSlice()\"\n * \n * A function that accepts an initial state, an object of reducer functions, and a \"slice name\",\n * and automatically generates action creators and action types that correspond to the reducers\n * and state. This API is the standard approach for writing Redux logic.\n */\nvar todosSlice = createSlice({\n  name: 'todos',\n  initialState: initialTodos,\n  /**     2.7 Handling application level events\n   * Now that we have edited a todo object, we can send it to the reducer to store it\n   * in the global state. Lets add an addTodo handler that can receive the new todo\n   * instance and push it to the array of current todos.\n   */\n  reducers: {\n    // define reducer functions as a map\n    addTodo: function addTodo(state, action) {\n      // reducer functions receive current state\n      state.push({\n        // mutate current state into new state, e.g.,\n        _id: new Date().getTime(),\n        // pushing new object. _id set to current date\n        do: action.payload.do,\n        // do set to \"do\" object sent through action obj\n        done: false // commonly referred to as the \"payload\"\n      });\n    },\n    deleteTodo: function deleteTodo(state, action) {\n      // new deleteTodo function extracts index\n      var index = action.payload; // from action's payload and uses it to\n      state.splice(index, 1); // splice out the todo to be deleted\n    },\n    todoDoneToggle: function todoDoneToggle(state, action) {\n      var todo = state.find(function (todo) {\n        return todo._id === action.payload._id;\n      });\n      todo.done = !todo.done;\n    }\n  }\n});\n\n// export actions so we can call them from UI\nvar _todosSlice$actions = todosSlice.actions,\n  addTodo = _todosSlice$actions.addTodo,\n  deleteTodo = _todosSlice$actions.deleteTodo,\n  todoDoneToggle = _todosSlice$actions.todoDoneToggle;\nexport { addTodo, deleteTodo, todoDoneToggle };\nexport default todosSlice.reducer;","map":{"version":3,"names":["createSlice","initialTodos","_id","do","done","todosSlice","name","initialState","reducers","addTodo","state","action","push","Date","getTime","payload","deleteTodo","index","splice","todoDoneToggle","todo","find","actions","reducer"],"sources":["/Users/tylerzhang/2023/spring/webdev/tuiter-react-web-app/src/labs/a7/redux-examples/reducers/todos-reducer.js"],"sourcesContent":["/**     2.5 Retrieving state from a reducer\n * \n * Redux allows maintaining the state of an application. The state changes over time as\n * the user interacts with the application. There are four basic ways we interact with data:\n * create data, read data, update date, and delete data. We often refer to these operations\n * by the acronym CRUD. Let's implement a small todo app to illustrate the CRUD operations.\n * In the same reducers directory created earlier, create the reducer for the todo app in a\n * file called todos-reducer.js. Copy the content below into the file.\n */\n\n\nimport { createSlice } from '@reduxjs/toolkit'\n\nconst initialTodos = [\n    {\n        _id: \"123\",\n        do: \"Accelerate the world's transition to sustainable energy\",\n        done: false\n    },\n    {\n        _id: \"234\",\n        do: \"Reduce space transportation costs to become a spacefaring civilization\",\n        done: false\n    },\n];\n\n\n/**     About \"creatSlice()\"\n * \n * A function that accepts an initial state, an object of reducer functions, and a \"slice name\",\n * and automatically generates action creators and action types that correspond to the reducers\n * and state. This API is the standard approach for writing Redux logic.\n */\nconst todosSlice = createSlice({\n    name: 'todos',\n    initialState: initialTodos,\n\n    /**     2.7 Handling application level events\n     * Now that we have edited a todo object, we can send it to the reducer to store it\n     * in the global state. Lets add an addTodo handler that can receive the new todo\n     * instance and push it to the array of current todos.\n     */\n    reducers: {                                 // define reducer functions as a map\n\n        addTodo(state, action) {                // reducer functions receive current state\n            state.push({                        // mutate current state into new state, e.g.,\n                _id: (new Date()).getTime(),    // pushing new object. _id set to current date\n                do: action.payload.do,          // do set to \"do\" object sent through action obj\n                done: false                     // commonly referred to as the \"payload\"\n            });\n        },\n\n        deleteTodo(state, action) {             // new deleteTodo function extracts index\n            const index = action.payload        // from action's payload and uses it to\n            state.splice(index, 1)              // splice out the todo to be deleted\n        },\n\n        todoDoneToggle(state, action) {\n            const todo = state.find((todo) =>\n                todo._id === action.payload._id)\n            todo.done = !todo.done\n        }\n    }\n});\n\n// export actions so we can call them from UI\nexport const { addTodo, deleteTodo, todoDoneToggle } = todosSlice.actions\nexport default todosSlice.reducer\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,IAAMC,YAAY,GAAG,CACjB;EACIC,GAAG,EAAE,KAAK;EACVC,EAAE,EAAE,yDAAyD;EAC7DC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,GAAG,EAAE,KAAK;EACVC,EAAE,EAAE,wEAAwE;EAC5EC,IAAI,EAAE;AACV,CAAC,CACJ;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,UAAU,GAAGL,WAAW,CAAC;EAC3BM,IAAI,EAAE,OAAO;EACbC,YAAY,EAAEN,YAAY;EAE1B;AACJ;AACA;AACA;AACA;EACIO,QAAQ,EAAE;IAAkC;IAExCC,OAAO,mBAACC,KAAK,EAAEC,MAAM,EAAE;MAAiB;MACpCD,KAAK,CAACE,IAAI,CAAC;QAAyB;QAChCV,GAAG,EAAG,IAAIW,IAAI,EAAE,CAAEC,OAAO,EAAE;QAAK;QAChCX,EAAE,EAAEQ,MAAM,CAACI,OAAO,CAACZ,EAAE;QAAW;QAChCC,IAAI,EAAE,KAAK,CAAqB;MACpC,CAAC,CAAC;IACN,CAAC;IAEDY,UAAU,sBAACN,KAAK,EAAEC,MAAM,EAAE;MAAc;MACpC,IAAMM,KAAK,GAAGN,MAAM,CAACI,OAAO,EAAQ;MACpCL,KAAK,CAACQ,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC,EAAc;IACxC,CAAC;IAEDE,cAAc,0BAACT,KAAK,EAAEC,MAAM,EAAE;MAC1B,IAAMS,IAAI,GAAGV,KAAK,CAACW,IAAI,CAAC,UAACD,IAAI;QAAA,OACzBA,IAAI,CAAClB,GAAG,KAAKS,MAAM,CAACI,OAAO,CAACb,GAAG;MAAA,EAAC;MACpCkB,IAAI,CAAChB,IAAI,GAAG,CAACgB,IAAI,CAAChB,IAAI;IAC1B;EACJ;AACJ,CAAC,CAAC;;AAEF;AAAA,0BACuDC,UAAU,CAACiB,OAAO;EAA1Db,OAAO,uBAAPA,OAAO;EAAEO,UAAU,uBAAVA,UAAU;EAAEG,cAAc,uBAAdA,cAAc;AAAA;AAClD,eAAed,UAAU,CAACkB,OAAO"},"metadata":{},"sourceType":"module"}