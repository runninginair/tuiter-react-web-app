{"ast":null,"code":"/**     2.4 Create a Hello World Redux component\n * \n * Our first example will be the simplest redux example. \n * Create a reducer that provides some static data, e.g., a \"Hello World\" message.\n * Copy the code below into src/labs/a7/redux-examples/reducers/hello.js. \n * Notice that we could have stored the data {message: 'Hello World'} into a static\n * JSON file, but the point here is to learn how data can be shared across multiple\n * components, and how each can interact with the data like reading and writing to it.\n * To do that we wrap the data in a function that can calculate the data dynamically\n * as circumstances change over time.\n */\n\nvar hello = function hello() {\n  return {\n    message: 'Hello Redux World'\n  };\n};\nexport default hello;","map":{"version":3,"names":["hello","message"],"sources":["/Users/tylerzhang/2023/spring/webdev/tuiter-react-web-app/src/labs/a7/redux-examples/reducers/hello.js"],"sourcesContent":["/**     2.4 Create a Hello World Redux component\n * \n * Our first example will be the simplest redux example. \n * Create a reducer that provides some static data, e.g., a \"Hello World\" message.\n * Copy the code below into src/labs/a7/redux-examples/reducers/hello.js. \n * Notice that we could have stored the data {message: 'Hello World'} into a static\n * JSON file, but the point here is to learn how data can be shared across multiple\n * components, and how each can interact with the data like reading and writing to it.\n * To do that we wrap the data in a function that can calculate the data dynamically\n * as circumstances change over time.\n */\n\nconst hello = () => (\n    {\n        message: 'Hello Redux World'\n    }\n);\n\nexport default hello;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAK;EAAA,OACP;IACIC,OAAO,EAAE;EACb,CAAC;AAAA,CACJ;AAED,eAAeD,KAAK"},"metadata":{},"sourceType":"module"}