{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"/Users/tylerzhang/2023/spring/webdev/tuiter-react-web-app/src/labs/a7/redux-examples/hello-redux-example-component.js\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\"; // import useSelector hook  from react-redux\n\n/**     2.4 Create a Hello World Redux component\n * \n * The component uses redux's useSelector hook to extract the message from the reducer.\n * When the component loads, reducers pass their data in the function declared in useSelector.\n * In the code below, the parameter hello in (hello) => { … }, gets the object returned by the\n * reducers, e.g., {message: 'Hello World'}, therefore, (hello) => hello.message returns\n * 'Hello World', and that's the value const message is initialized with.\n * The component goes on to render 'Hello World' in an H1 element.\n * @returns \n */\nvar HelloReduxExampleComponent = function HelloReduxExampleComponent() {\n  // const message = useSelector((hello) => hello.message);  // extract 'Hello World' from reducer\n  var message = useSelector(function (state) {\n    return state.hello.message;\n  }); // extract 'Hello World' from reducer\n\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, message) // render <h1>Hello World</h1>\n  ;\n};\n\nexport default HelloReduxExampleComponent;","map":{"version":3,"names":["React","useSelector","HelloReduxExampleComponent","message","state","hello"],"sources":["/Users/tylerzhang/2023/spring/webdev/tuiter-react-web-app/src/labs/a7/redux-examples/hello-redux-example-component.js"],"sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";      // import useSelector hook  from react-redux\n\n/**     2.4 Create a Hello World Redux component\n * \n * The component uses redux's useSelector hook to extract the message from the reducer.\n * When the component loads, reducers pass their data in the function declared in useSelector.\n * In the code below, the parameter hello in (hello) => { … }, gets the object returned by the\n * reducers, e.g., {message: 'Hello World'}, therefore, (hello) => hello.message returns\n * 'Hello World', and that's the value const message is initialized with.\n * The component goes on to render 'Hello World' in an H1 element.\n * @returns \n */\nconst HelloReduxExampleComponent = () => {\n    // const message = useSelector((hello) => hello.message);  // extract 'Hello World' from reducer\n    const message = useSelector((state) => state.hello.message);  // extract 'Hello World' from reducer\n\n    return (\n        <h1>{message}</h1>                                  // render <h1>Hello World</h1>\n    );\n};\n\nexport default HelloReduxExampleComponent;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa,CAAC,CAAM;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA0B,GAAS;EACrC;EACA,IAAMC,OAAO,GAAGF,WAAW,CAAC,UAACG,KAAK;IAAA,OAAKA,KAAK,CAACC,KAAK,CAACF,OAAO;EAAA,EAAC,CAAC,CAAE;;EAE9D,oBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAKA,OAAO,CAAM,CAAkC;EAAA;AAE5D,CAAC;;AAED,eAAeD,0BAA0B"},"metadata":{},"sourceType":"module"}