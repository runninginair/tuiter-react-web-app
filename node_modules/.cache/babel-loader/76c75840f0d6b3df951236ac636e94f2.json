{"ast":null,"code":"import _defineProperty from \"/Users/tylerzhang/2023/spring/webdev/tuiter-react-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/tylerzhang/2023/spring/webdev/tuiter-react-web-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _extraReducers;\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport tuits from '../data/tuits.json';\nimport // import the thunks\n{ createTuitThunk, updateTuitThunk, findTuitsThunk, deleteTuitThunk } from \"../../services/tuits-thunks\";\nvar initialState = {\n  // initial state has no tuits \n  tuits: [],\n  // no tuits\n  loading: false // loading flag to display spinner\n};\n\nvar tuitsSlice = createSlice({\n  name: 'tuits',\n  initialState: initialState,\n  // same as \"initialState\": initialState\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, findTuitsThunk.pending,\n  // if request is not yet fulfilled …\n  function (state) {\n    state.loading = true; // set loading true so UI can display spinner\n    state.tuits = []; // empty tuits since we are still fetching them\n  }), _defineProperty(_extraReducers, findTuitsThunk.fulfilled,\n  // when we get response, request is fulfilled\n  function (state, _ref) {\n    var payload = _ref.payload;\n    // we extract/destruct payload from action object\n    state.loading = false; // turn off loading flag since we have the data\n    state.tuits = payload; // payload has tuits from server and update redux state\n  }), _defineProperty(_extraReducers, findTuitsThunk.rejected,\n  // if request times out, or responds with error\n  function (state, action) {\n    state.loading = false; // reset loading flag\n    state.error = action.error; // report error\n  }), _defineProperty(_extraReducers, deleteTuitThunk.fulfilled,\n  // handle successful response\n  function (state, _ref2) {\n    var payload = _ref2.payload;\n    // server response successful\n    state.loading = false; // payload from action contains tuit ID to remove\n    state.tuits = state.tuits // turn off loading flag\n    .filter(function (t) {\n      return t._id !== payload;\n    }); // filter out tuit whose ID matches tuit to remove\n  }), _defineProperty(_extraReducers, createTuitThunk.fulfilled, function (state, _ref3) {\n    var payload = _ref3.payload;\n    state.loading = false;\n    state.tuits.push(payload);\n  }), _defineProperty(_extraReducers, updateTuitThunk.fulfilled, function (state, _ref4) {\n    var payload = _ref4.payload;\n    state.loading = false;\n    var tuitNdx = state.tuits.findIndex(function (t) {\n      return t._id === payload._id;\n    });\n    state.tuits[tuitNdx] = _objectSpread({}, state.tuits[tuitNdx], payload);\n  }), _extraReducers),\n  reducers: {}\n});\n\n/**     Following code blocks are A7 version \"tuitsSlice\".   */\n// const currentUser = {                        // create an object that represents the currently\n//     \"userName\": \"Novak Djokovic\",            // logged in user which contains profile information\n//     \"handle\": \"@DjokerNole\",                 // such as username, their avatar logo, and handle.\n//     \"image\": \"Novak_400x400.jpeg\",           // Later this will come from users login in.\n// };\n\n// const templateTuit = {                       // create a template tuit object with some default\n//     ...currentUser,                          // values and copy over the fields userName, handle and\n//     \"topic\": \"Programing\",                   // image from the currentUser\n//     \"time\": \"1min\",\n//     \"liked\": false,\n//     \"replies\": 0,\n//     \"retuits\": 0,\n//     \"likes\": 0,\n// }\n\n// const tuitsSlice = createSlice(\n//     {\n//         name: 'tuits',\n//         initialState: tuits,\n\n//         reducers: {                                 // add createTuit reducer function which appends\n//             createTuit(state, action) {             // the new tuit in the payload at the beginning of the\n//                 state.unshift({                     // array of tuits contained in the state. Also copy\n//                     ...action.payload,              // all fields from templateTuit and initialize\n//                     ...templateTuit,                // the unique identifier with a timestamp\n//                     _id: (new Date()).getTime(),\n//                 })\n//             },\n\n//             deleteTuit(state, action) {\n//                 const index = state.findIndex(tuit =>\n//                     tuit._id === action.payload);\n//                 state.splice(index, 1);\n//             },\n\n//             likedToggle(state, action) {\n//                 const tuit = state.find((tuit) =>\n//                     tuit._id === action.payload._id);\n//                 tuit.liked = !tuit.liked;\n//             }\n\n//         }\n//     }\n// );\n\nexport default tuitsSlice.reducer;\n// export const { createTuit, deleteTuit, likedToggle } = tuitsSlice.actions;     // export reducer function","map":{"version":3,"names":["createSlice","tuits","createTuitThunk","updateTuitThunk","findTuitsThunk","deleteTuitThunk","initialState","loading","tuitsSlice","name","extraReducers","pending","state","fulfilled","payload","rejected","action","error","filter","t","_id","push","tuitNdx","findIndex","reducers","reducer"],"sources":["/Users/tylerzhang/2023/spring/webdev/tuiter-react-web-app/src/tuiter/tuits/tuits-reducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport tuits from '../data/tuits.json';\nimport { createTuitThunk, updateTuitThunk, findTuitsThunk, deleteTuitThunk }       // import the thunks\n    from \"../../services/tuits-thunks\";\n\n\nconst initialState = {          // initial state has no tuits \n    tuits: [],                  // no tuits\n    loading: false              // loading flag to display spinner\n}\n\nconst tuitsSlice = createSlice({\n    name: 'tuits',\n    initialState,               // same as \"initialState\": initialState\n    extraReducers: {            // define asynchronous reducers\n\n        [findTuitsThunk.pending]:                       // if request is not yet fulfilled …\n            (state) => {\n                state.loading = true                    // set loading true so UI can display spinner\n                state.tuits = []                        // empty tuits since we are still fetching them\n            },\n\n        [findTuitsThunk.fulfilled]:                     // when we get response, request is fulfilled\n            (state, { payload }) => {                   // we extract/destruct payload from action object\n                state.loading = false                   // turn off loading flag since we have the data\n                state.tuits = payload                   // payload has tuits from server and update redux state\n            },\n\n        [findTuitsThunk.rejected]:                      // if request times out, or responds with error\n            (state, action) => {\n                state.loading = false                   // reset loading flag\n                state.error = action.error              // report error\n            },\n\n\n        [deleteTuitThunk.fulfilled]:                    // handle successful response\n            (state, { payload }) => {                   // server response successful\n                state.loading = false                   // payload from action contains tuit ID to remove\n                state.tuits = state.tuits               // turn off loading flag\n                    .filter(t => t._id !== payload)     // filter out tuit whose ID matches tuit to remove\n            },                                          // we're ignoring pending and rejected thunks\n\n\n        [createTuitThunk.fulfilled]:\n            (state, { payload }) => {\n                state.loading = false\n                state.tuits.push(payload)\n            },\n\n        [updateTuitThunk.fulfilled]:\n            (state, { payload }) => {\n                state.loading = false\n                const tuitNdx = state.tuits\n                    .findIndex((t) => t._id === payload._id)\n                state.tuits[tuitNdx] = {\n                    ...state.tuits[tuitNdx],\n                    ...payload\n                }\n            }\n\n    },\n    reducers: {}\n});\n\n/**     Following code blocks are A7 version \"tuitsSlice\".   */\n// const currentUser = {                        // create an object that represents the currently\n//     \"userName\": \"Novak Djokovic\",            // logged in user which contains profile information\n//     \"handle\": \"@DjokerNole\",                 // such as username, their avatar logo, and handle.\n//     \"image\": \"Novak_400x400.jpeg\",           // Later this will come from users login in.\n// };\n\n// const templateTuit = {                       // create a template tuit object with some default\n//     ...currentUser,                          // values and copy over the fields userName, handle and\n//     \"topic\": \"Programing\",                   // image from the currentUser\n//     \"time\": \"1min\",\n//     \"liked\": false,\n//     \"replies\": 0,\n//     \"retuits\": 0,\n//     \"likes\": 0,\n// }\n\n// const tuitsSlice = createSlice(\n//     {\n//         name: 'tuits',\n//         initialState: tuits,\n\n//         reducers: {                                 // add createTuit reducer function which appends\n//             createTuit(state, action) {             // the new tuit in the payload at the beginning of the\n//                 state.unshift({                     // array of tuits contained in the state. Also copy\n//                     ...action.payload,              // all fields from templateTuit and initialize\n//                     ...templateTuit,                // the unique identifier with a timestamp\n//                     _id: (new Date()).getTime(),\n//                 })\n//             },\n\n//             deleteTuit(state, action) {\n//                 const index = state.findIndex(tuit =>\n//                     tuit._id === action.payload);\n//                 state.splice(index, 1);\n//             },\n\n//             likedToggle(state, action) {\n//                 const tuit = state.find((tuit) =>\n//                     tuit._id === action.payload._id);\n//                 tuit.liked = !tuit.liked;\n//             }\n\n//         }\n//     }\n// );\n\n\nexport default tuitsSlice.reducer;\n// export const { createTuit, deleteTuit, likedToggle } = tuitsSlice.actions;     // export reducer function"],"mappings":";;;AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAmF;AAAA,EAA1EC,eAAe,EAAEC,eAAe,EAAEC,cAAc,EAAEC,eAAe,QACjE,6BAA6B;AAGtC,IAAMC,YAAY,GAAG;EAAW;EAC5BL,KAAK,EAAE,EAAE;EAAmB;EAC5BM,OAAO,EAAE,KAAK,CAAc;AAChC,CAAC;;AAED,IAAMC,UAAU,GAAGR,WAAW,CAAC;EAC3BS,IAAI,EAAE,OAAO;EACbH,YAAY,EAAZA,YAAY;EAAgB;EAC5BI,aAAa,wDAERN,cAAc,CAACO,OAAO;EAAyB;EAC5C,UAACC,KAAK,EAAK;IACPA,KAAK,CAACL,OAAO,GAAG,IAAI,EAAoB;IACxCK,KAAK,CAACX,KAAK,GAAG,EAAE,EAAwB;EAC5C,CAAC,mCAEJG,cAAc,CAACS,SAAS;EAAuB;EAC5C,UAACD,KAAK,QAAkB;IAAA,IAAdE,OAAO,QAAPA,OAAO;IAA2B;IACxCF,KAAK,CAACL,OAAO,GAAG,KAAK,EAAmB;IACxCK,KAAK,CAACX,KAAK,GAAGa,OAAO,EAAmB;EAC5C,CAAC,mCAEJV,cAAc,CAACW,QAAQ;EAAwB;EAC5C,UAACH,KAAK,EAAEI,MAAM,EAAK;IACfJ,KAAK,CAACL,OAAO,GAAG,KAAK,EAAmB;IACxCK,KAAK,CAACK,KAAK,GAAGD,MAAM,CAACC,KAAK,EAAc;EAC5C,CAAC,mCAGJZ,eAAe,CAACQ,SAAS;EAAsB;EAC5C,UAACD,KAAK,SAAkB;IAAA,IAAdE,OAAO,SAAPA,OAAO;IAA2B;IACxCF,KAAK,CAACL,OAAO,GAAG,KAAK,EAAmB;IACxCK,KAAK,CAACX,KAAK,GAAGW,KAAK,CAACX,KAAK,CAAe;IAAA,CACnCiB,MAAM,CAAC,UAAAC,CAAC;MAAA,OAAIA,CAAC,CAACC,GAAG,KAAKN,OAAO;IAAA,EAAC,EAAK;EAC5C,CAAC,mCAGJZ,eAAe,CAACW,SAAS,EACtB,UAACD,KAAK,SAAkB;IAAA,IAAdE,OAAO,SAAPA,OAAO;IACbF,KAAK,CAACL,OAAO,GAAG,KAAK;IACrBK,KAAK,CAACX,KAAK,CAACoB,IAAI,CAACP,OAAO,CAAC;EAC7B,CAAC,mCAEJX,eAAe,CAACU,SAAS,EACtB,UAACD,KAAK,SAAkB;IAAA,IAAdE,OAAO,SAAPA,OAAO;IACbF,KAAK,CAACL,OAAO,GAAG,KAAK;IACrB,IAAMe,OAAO,GAAGV,KAAK,CAACX,KAAK,CACtBsB,SAAS,CAAC,UAACJ,CAAC;MAAA,OAAKA,CAAC,CAACC,GAAG,KAAKN,OAAO,CAACM,GAAG;IAAA,EAAC;IAC5CR,KAAK,CAACX,KAAK,CAACqB,OAAO,CAAC,qBACbV,KAAK,CAACX,KAAK,CAACqB,OAAO,CAAC,EACpBR,OAAO,CACb;EACL,CAAC,kBAER;EACDU,QAAQ,EAAE,CAAC;AACf,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA,eAAehB,UAAU,CAACiB,OAAO;AACjC"},"metadata":{},"sourceType":"module"}